// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: common.proto

package common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	P2PManager_AddICEOffer_FullMethodName          = "/common.P2PManager/AddICEOffer"
	P2PManager_AddICEAnswer_FullMethodName         = "/common.P2PManager/AddICEAnswer"
	P2PManager_AddSessionDescOffer_FullMethodName  = "/common.P2PManager/AddSessionDescOffer"
	P2PManager_AddSessionDescAnswer_FullMethodName = "/common.P2PManager/AddSessionDescAnswer"
)

// P2PManagerClient is the client API for P2PManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2PManagerClient interface {
	AddICEOffer(ctx context.Context, in *ICECandidate, opts ...grpc.CallOption) (*Empty, error)
	AddICEAnswer(ctx context.Context, in *ICECandidate, opts ...grpc.CallOption) (*Empty, error)
	AddSessionDescOffer(ctx context.Context, in *SessionDesc, opts ...grpc.CallOption) (*Empty, error)
	AddSessionDescAnswer(ctx context.Context, in *SessionDesc, opts ...grpc.CallOption) (*Empty, error)
}

type p2PManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PManagerClient(cc grpc.ClientConnInterface) P2PManagerClient {
	return &p2PManagerClient{cc}
}

func (c *p2PManagerClient) AddICEOffer(ctx context.Context, in *ICECandidate, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PManager_AddICEOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PManagerClient) AddICEAnswer(ctx context.Context, in *ICECandidate, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PManager_AddICEAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PManagerClient) AddSessionDescOffer(ctx context.Context, in *SessionDesc, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PManager_AddSessionDescOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PManagerClient) AddSessionDescAnswer(ctx context.Context, in *SessionDesc, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PManager_AddSessionDescAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PManagerServer is the server API for P2PManager service.
// All implementations must embed UnimplementedP2PManagerServer
// for forward compatibility.
type P2PManagerServer interface {
	AddICEOffer(context.Context, *ICECandidate) (*Empty, error)
	AddICEAnswer(context.Context, *ICECandidate) (*Empty, error)
	AddSessionDescOffer(context.Context, *SessionDesc) (*Empty, error)
	AddSessionDescAnswer(context.Context, *SessionDesc) (*Empty, error)
	mustEmbedUnimplementedP2PManagerServer()
}

// UnimplementedP2PManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedP2PManagerServer struct{}

func (UnimplementedP2PManagerServer) AddICEOffer(context.Context, *ICECandidate) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddICEOffer not implemented")
}
func (UnimplementedP2PManagerServer) AddICEAnswer(context.Context, *ICECandidate) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddICEAnswer not implemented")
}
func (UnimplementedP2PManagerServer) AddSessionDescOffer(context.Context, *SessionDesc) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSessionDescOffer not implemented")
}
func (UnimplementedP2PManagerServer) AddSessionDescAnswer(context.Context, *SessionDesc) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSessionDescAnswer not implemented")
}
func (UnimplementedP2PManagerServer) mustEmbedUnimplementedP2PManagerServer() {}
func (UnimplementedP2PManagerServer) testEmbeddedByValue()                    {}

// UnsafeP2PManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PManagerServer will
// result in compilation errors.
type UnsafeP2PManagerServer interface {
	mustEmbedUnimplementedP2PManagerServer()
}

func RegisterP2PManagerServer(s grpc.ServiceRegistrar, srv P2PManagerServer) {
	// If the following call pancis, it indicates UnimplementedP2PManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&P2PManager_ServiceDesc, srv)
}

func _P2PManager_AddICEOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ICECandidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PManagerServer).AddICEOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PManager_AddICEOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PManagerServer).AddICEOffer(ctx, req.(*ICECandidate))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PManager_AddICEAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ICECandidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PManagerServer).AddICEAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PManager_AddICEAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PManagerServer).AddICEAnswer(ctx, req.(*ICECandidate))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PManager_AddSessionDescOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDesc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PManagerServer).AddSessionDescOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PManager_AddSessionDescOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PManagerServer).AddSessionDescOffer(ctx, req.(*SessionDesc))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PManager_AddSessionDescAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDesc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PManagerServer).AddSessionDescAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PManager_AddSessionDescAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PManagerServer).AddSessionDescAnswer(ctx, req.(*SessionDesc))
	}
	return interceptor(ctx, in, info, handler)
}

// P2PManager_ServiceDesc is the grpc.ServiceDesc for P2PManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2PManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.P2PManager",
	HandlerType: (*P2PManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddICEOffer",
			Handler:    _P2PManager_AddICEOffer_Handler,
		},
		{
			MethodName: "AddICEAnswer",
			Handler:    _P2PManager_AddICEAnswer_Handler,
		},
		{
			MethodName: "AddSessionDescOffer",
			Handler:    _P2PManager_AddSessionDescOffer_Handler,
		},
		{
			MethodName: "AddSessionDescAnswer",
			Handler:    _P2PManager_AddSessionDescAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

const (
	P2PClient_CheckClientType_FullMethodName      = "/common.P2PClient/CheckClientType"
	P2PClient_StartOffer_FullMethodName           = "/common.P2PClient/StartOffer"
	P2PClient_StartAnswer_FullMethodName          = "/common.P2PClient/StartAnswer"
	P2PClient_AddICEOffer_FullMethodName          = "/common.P2PClient/AddICEOffer"
	P2PClient_AddICEAnswer_FullMethodName         = "/common.P2PClient/AddICEAnswer"
	P2PClient_AddSessionDescOffer_FullMethodName  = "/common.P2PClient/AddSessionDescOffer"
	P2PClient_AddSessionDescAnswer_FullMethodName = "/common.P2PClient/AddSessionDescAnswer"
)

// P2PClientClient is the client API for P2PClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2PClientClient interface {
	CheckClientType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientType, error)
	StartOffer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartAnswer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	AddICEOffer(ctx context.Context, in *ICECandidate, opts ...grpc.CallOption) (*Empty, error)
	AddICEAnswer(ctx context.Context, in *ICECandidate, opts ...grpc.CallOption) (*Empty, error)
	AddSessionDescOffer(ctx context.Context, in *SessionDesc, opts ...grpc.CallOption) (*Empty, error)
	AddSessionDescAnswer(ctx context.Context, in *SessionDesc, opts ...grpc.CallOption) (*Empty, error)
}

type p2PClientClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PClientClient(cc grpc.ClientConnInterface) P2PClientClient {
	return &p2PClientClient{cc}
}

func (c *p2PClientClient) CheckClientType(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ClientType, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientType)
	err := c.cc.Invoke(ctx, P2PClient_CheckClientType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClientClient) StartOffer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PClient_StartOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClientClient) StartAnswer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PClient_StartAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClientClient) AddICEOffer(ctx context.Context, in *ICECandidate, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PClient_AddICEOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClientClient) AddICEAnswer(ctx context.Context, in *ICECandidate, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PClient_AddICEAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClientClient) AddSessionDescOffer(ctx context.Context, in *SessionDesc, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PClient_AddSessionDescOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClientClient) AddSessionDescAnswer(ctx context.Context, in *SessionDesc, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, P2PClient_AddSessionDescAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PClientServer is the server API for P2PClient service.
// All implementations must embed UnimplementedP2PClientServer
// for forward compatibility.
type P2PClientServer interface {
	CheckClientType(context.Context, *Empty) (*ClientType, error)
	StartOffer(context.Context, *Empty) (*Empty, error)
	StartAnswer(context.Context, *Empty) (*Empty, error)
	AddICEOffer(context.Context, *ICECandidate) (*Empty, error)
	AddICEAnswer(context.Context, *ICECandidate) (*Empty, error)
	AddSessionDescOffer(context.Context, *SessionDesc) (*Empty, error)
	AddSessionDescAnswer(context.Context, *SessionDesc) (*Empty, error)
	mustEmbedUnimplementedP2PClientServer()
}

// UnimplementedP2PClientServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedP2PClientServer struct{}

func (UnimplementedP2PClientServer) CheckClientType(context.Context, *Empty) (*ClientType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckClientType not implemented")
}
func (UnimplementedP2PClientServer) StartOffer(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOffer not implemented")
}
func (UnimplementedP2PClientServer) StartAnswer(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAnswer not implemented")
}
func (UnimplementedP2PClientServer) AddICEOffer(context.Context, *ICECandidate) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddICEOffer not implemented")
}
func (UnimplementedP2PClientServer) AddICEAnswer(context.Context, *ICECandidate) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddICEAnswer not implemented")
}
func (UnimplementedP2PClientServer) AddSessionDescOffer(context.Context, *SessionDesc) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSessionDescOffer not implemented")
}
func (UnimplementedP2PClientServer) AddSessionDescAnswer(context.Context, *SessionDesc) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSessionDescAnswer not implemented")
}
func (UnimplementedP2PClientServer) mustEmbedUnimplementedP2PClientServer() {}
func (UnimplementedP2PClientServer) testEmbeddedByValue()                   {}

// UnsafeP2PClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PClientServer will
// result in compilation errors.
type UnsafeP2PClientServer interface {
	mustEmbedUnimplementedP2PClientServer()
}

func RegisterP2PClientServer(s grpc.ServiceRegistrar, srv P2PClientServer) {
	// If the following call pancis, it indicates UnimplementedP2PClientServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&P2PClient_ServiceDesc, srv)
}

func _P2PClient_CheckClientType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PClientServer).CheckClientType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PClient_CheckClientType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PClientServer).CheckClientType(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PClient_StartOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PClientServer).StartOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PClient_StartOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PClientServer).StartOffer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PClient_StartAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PClientServer).StartAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PClient_StartAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PClientServer).StartAnswer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PClient_AddICEOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ICECandidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PClientServer).AddICEOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PClient_AddICEOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PClientServer).AddICEOffer(ctx, req.(*ICECandidate))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PClient_AddICEAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ICECandidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PClientServer).AddICEAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PClient_AddICEAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PClientServer).AddICEAnswer(ctx, req.(*ICECandidate))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PClient_AddSessionDescOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDesc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PClientServer).AddSessionDescOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PClient_AddSessionDescOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PClientServer).AddSessionDescOffer(ctx, req.(*SessionDesc))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PClient_AddSessionDescAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionDesc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PClientServer).AddSessionDescAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PClient_AddSessionDescAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PClientServer).AddSessionDescAnswer(ctx, req.(*SessionDesc))
	}
	return interceptor(ctx, in, info, handler)
}

// P2PClient_ServiceDesc is the grpc.ServiceDesc for P2PClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2PClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.P2PClient",
	HandlerType: (*P2PClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckClientType",
			Handler:    _P2PClient_CheckClientType_Handler,
		},
		{
			MethodName: "StartOffer",
			Handler:    _P2PClient_StartOffer_Handler,
		},
		{
			MethodName: "StartAnswer",
			Handler:    _P2PClient_StartAnswer_Handler,
		},
		{
			MethodName: "AddICEOffer",
			Handler:    _P2PClient_AddICEOffer_Handler,
		},
		{
			MethodName: "AddICEAnswer",
			Handler:    _P2PClient_AddICEAnswer_Handler,
		},
		{
			MethodName: "AddSessionDescOffer",
			Handler:    _P2PClient_AddSessionDescOffer_Handler,
		},
		{
			MethodName: "AddSessionDescAnswer",
			Handler:    _P2PClient_AddSessionDescAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}
